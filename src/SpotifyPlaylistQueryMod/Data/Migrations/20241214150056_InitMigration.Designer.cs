// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpotifyPlaylistQueryMod.Data;

#nullable disable

namespace SpotifyPlaylistQueryMod.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241214150056_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.DestinationPlaylist", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_target_playlists");

                    b.ToTable("target_playlists", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPaused")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paused");

                    b.Property<bool>("IsSuperseded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superseded");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("query");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<string>("TargetId")
                        .HasColumnType("text")
                        .HasColumnName("target_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_queries");

                    b.HasIndex("SourceId")
                        .HasDatabaseName("ix_queries_source_id");

                    b.HasIndex("TargetId")
                        .IsUnique()
                        .HasDatabaseName("ix_queries_target_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_queries_user_id");

                    b.ToTable("queries", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("InputType")
                        .HasColumnType("integer")
                        .HasColumnName("input_type");

                    b.Property<string>("LastRunSnapshotId")
                        .HasColumnType("text")
                        .HasColumnName("last_run_snapshot_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_queries_state");

                    b.ToTable("queries_state", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.SourcePlaylist", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processing");

                    b.Property<DateTimeOffset>("NextCheck")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_check");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("SnapshotId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("snapshot_id");

                    b.HasKey("Id")
                        .HasName("pk_source_playlists");

                    b.ToTable("source_playlists", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<string>("AddedBy")
                        .HasColumnType("text")
                        .HasColumnName("added_by");

                    b.Property<string>("SourcePlaylistId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_playlist_id");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("track_id");

                    b.HasKey("Id")
                        .HasName("pk_tracks");

                    b.HasIndex("SourcePlaylistId")
                        .HasDatabaseName("ix_tracks_source_playlist_id");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsCollaborationEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_collaboration_enabled");

                    b.Property<DateTimeOffset>("NextRefresh")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_refresh");

                    b.Property<int>("Privileges")
                        .HasColumnType("integer")
                        .HasColumnName("privileges");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Privileges")
                        .IsUnique()
                        .HasDatabaseName("ix_unique_superadmin")
                        .HasFilter("Privileges = -42");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryInfo", b =>
                {
                    b.HasOne("SpotifyPlaylistQueryMod.Models.Entities.SourcePlaylist", null)
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_queries_source_playlists_source_id");

                    b.HasOne("SpotifyPlaylistQueryMod.Models.Entities.DestinationPlaylist", null)
                        .WithOne("ActiveQuery")
                        .HasForeignKey("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryInfo", "TargetId")
                        .HasConstraintName("fk_queries_target_playlists_target_id");

                    b.HasOne("SpotifyPlaylistQueryMod.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_queries_users_user_id");
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryState", b =>
                {
                    b.HasOne("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryInfo", "Info")
                        .WithOne()
                        .HasForeignKey("SpotifyPlaylistQueryMod.Models.Entities.PlaylistQueryState", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_queries_state_queries_id");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.Track", b =>
                {
                    b.HasOne("SpotifyPlaylistQueryMod.Models.Entities.SourcePlaylist", null)
                        .WithMany()
                        .HasForeignKey("SourcePlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracks_source_playlists_source_playlist_id");
                });

            modelBuilder.Entity("SpotifyPlaylistQueryMod.Models.Entities.DestinationPlaylist", b =>
                {
                    b.Navigation("ActiveQuery");
                });
#pragma warning restore 612, 618
        }
    }
}
